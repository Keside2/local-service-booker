// src/context/CurrencyContext.jsx
import { createContext, useContext, useState, useEffect } from "react";
import API from "../pages/axiosInstance";

const CurrencyContext = createContext();

export const CurrencyProvider = ({ children }) => {
  const [currency, setCurrency] = useState("NGN");
  const [symbol, setSymbol] = useState("‚Ç¶");

  // Load from localStorage when app starts
  
  const fetchCurrency = async () => {
    try {
      const res = await API.get("/settings/public"); // üëà create this route (explained below)
      const backendCurrency = res.data?.currency;

      if (backendCurrency) {
        setCurrency(backendCurrency);
        setSymbol(getSymbol(backendCurrency));
        localStorage.setItem("currency", backendCurrency);
      }
    } catch (err) {
      console.warn("Could not load currency from backend:", err);
    }
  };

  // ‚úÖ On mount: load from localStorage first, then fetch from backend
  useEffect(() => {
    const saved = localStorage.getItem("currency");
    if (saved) {
      setCurrency(saved);
      setSymbol(getSymbol(saved));
    }
    fetchCurrency();

    // üîÅ Optionally refresh every 30s to stay synced with backend
    const interval = setInterval(fetchCurrency, 30000);
    return () => clearInterval(interval);
  }, []);


  // Update both currency + symbol
  const changeCurrency = (newCurrency) => {
    setCurrency(newCurrency);
    setSymbol(getSymbol(newCurrency));
    localStorage.setItem("currency", newCurrency);
  };

  // ‚úÖ Helper to get correct symbol for the top 50 world currencies
const getSymbol = (curr) => {
  const symbols = {
    USD: "$", // US Dollar
    EUR: "‚Ç¨", // Euro
    GBP: "¬£", // British Pound
    NGN: "‚Ç¶", // Nigerian Naira
    JPY: "¬•", // Japanese Yen
    CNY: "¬•", // Chinese Yuan
    INR: "‚Çπ", // Indian Rupee
    CAD: "$", // Canadian Dollar
    AUD: "$", // Australian Dollar
    NZD: "$", // New Zealand Dollar
    CHF: "CHF", // Swiss Franc
    SEK: "kr", // Swedish Krona
    NOK: "kr", // Norwegian Krone
    DKK: "kr", // Danish Krone
    ZAR: "R", // South African Rand
    GHS: "‚Çµ", // Ghanaian Cedi
    KES: "KSh", // Kenyan Shilling
    UGX: "USh", // Ugandan Shilling
    TZS: "TSh", // Tanzanian Shilling
    EGP: "¬£", // Egyptian Pound
    MAD: "ÿØ.ŸÖ.", // Moroccan Dirham
    AED: "ÿØ.ÿ•", // UAE Dirham
    SAR: "Ô∑º", // Saudi Riyal
    QAR: "Ô∑º", // Qatari Riyal
    BHD: ".ÿØ.ÿ®", // Bahraini Dinar
    KWD: "ÿØ.ŸÉ", // Kuwaiti Dinar
    PKR: "‚Ç®", // Pakistani Rupee
    BDT: "‡ß≥", // Bangladeshi Taka
    LKR: "Rs", // Sri Lankan Rupee
    MYR: "RM", // Malaysian Ringgit
    SGD: "$", // Singapore Dollar
    IDR: "Rp", // Indonesian Rupiah
    THB: "‡∏ø", // Thai Baht
    PHP: "‚Ç±", // Philippine Peso
    VND: "‚Ç´", // Vietnamese Dong
    KRW: "‚Ç©", // South Korean Won
    HKD: "$", // Hong Kong Dollar
    BRL: "R$", // Brazilian Real
    ARS: "$", // Argentine Peso
    CLP: "$", // Chilean Peso
    MXN: "$", // Mexican Peso
    COP: "$", // Colombian Peso
    PEN: "S/", // Peruvian Sol
    RUB: "‚ÇΩ", // Russian Ruble
    TRY: "‚Ç∫", // Turkish Lira
    PLN: "z≈Ç", // Polish Zloty
    CZK: "Kƒç", // Czech Koruna
    HUF: "Ft", // Hungarian Forint
    ILS: "‚Ç™", // Israeli Shekel
    RON: "lei", // Romanian Leu
  };

  return symbols[curr] || curr; // fallback: return code itself if unknown
};

  return (
    <CurrencyContext.Provider value={{ currency, symbol, changeCurrency }}>
      {children}
    </CurrencyContext.Provider>
  );
};

export const useCurrency = () => useContext(CurrencyContext);
